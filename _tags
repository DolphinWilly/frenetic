# OASIS_START
# DO NOT EDIT (digest: d760afac982534f971ec9fef1eb2d11e)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library frenetic
"lib/frenetic.cmxs": use_frenetic
<lib/*.ml{,i,y}>: package(async)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(cstruct.async)
<lib/*.ml{,i,y}>: package(cstruct.syntax)
<lib/*.ml{,i,y}>: package(ocamlgraph)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(tcpip)
# Library openflow
"openflow/lib/openflow.cmxs": use_openflow
<openflow/lib/*.ml{,i,y}>: package(async)
<openflow/lib/*.ml{,i,y}>: package(core)
<openflow/lib/*.ml{,i,y}>: package(cstruct)
<openflow/lib/*.ml{,i,y}>: package(cstruct.async)
<openflow/lib/*.ml{,i,y}>: package(cstruct.syntax)
<openflow/lib/*.ml{,i,y}>: package(ocamlgraph)
<openflow/lib/*.ml{,i,y}>: package(sexplib)
<openflow/lib/*.ml{,i,y}>: package(sexplib.syntax)
<openflow/lib/*.ml{,i,y}>: package(str)
<openflow/lib/*.ml{,i,y}>: package(tcpip)
<openflow/lib/*.ml{,i,y}>: package(threads)
<openflow/lib/*.ml{,i,y}>: use_frenetic
# Library netkat
"frenetic/lib/netkat.cmxs": use_netkat
<frenetic/lib/*.ml{,i,y}>: package(async)
<frenetic/lib/*.ml{,i,y}>: package(base64)
<frenetic/lib/*.ml{,i,y}>: package(core)
<frenetic/lib/*.ml{,i,y}>: package(cstruct)
<frenetic/lib/*.ml{,i,y}>: package(cstruct.async)
<frenetic/lib/*.ml{,i,y}>: package(cstruct.syntax)
<frenetic/lib/*.ml{,i,y}>: package(fieldslib)
<frenetic/lib/*.ml{,i,y}>: package(fieldslib.syntax)
<frenetic/lib/*.ml{,i,y}>: package(ipaddr)
<frenetic/lib/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/lib/*.ml{,i,y}>: package(sexplib)
<frenetic/lib/*.ml{,i,y}>: package(sexplib.syntax)
<frenetic/lib/*.ml{,i,y}>: package(str)
<frenetic/lib/*.ml{,i,y}>: package(tcpip)
<frenetic/lib/*.ml{,i,y}>: package(threads)
<frenetic/lib/*.ml{,i,y}>: package(yojson)
<frenetic/lib/*.ml{,i,y}>: use_frenetic
<frenetic/lib/*.ml{,i,y}>: use_openflow
# Library syntax
"frenetic/syntax/syntax.cmxs": use_syntax
<frenetic/syntax/*.ml{,i,y}>: package(camlp4.extend)
<frenetic/syntax/*.ml{,i,y}>: package(camlp4.lib)
<frenetic/syntax/*.ml{,i,y}>: package(camlp4.quotations.o)
<frenetic/syntax/*.ml{,i,y}>: package(ipaddr)
<frenetic/syntax/*.ml{,i,y}>: package(ulex)
# Library async
"frenetic/async/async.cmxs": use_async
<frenetic/async/*.ml{,i,y}>: package(async)
<frenetic/async/*.ml{,i,y}>: package(base64)
<frenetic/async/*.ml{,i,y}>: package(core)
<frenetic/async/*.ml{,i,y}>: package(cstruct)
<frenetic/async/*.ml{,i,y}>: package(cstruct.async)
<frenetic/async/*.ml{,i,y}>: package(cstruct.syntax)
<frenetic/async/*.ml{,i,y}>: package(fieldslib)
<frenetic/async/*.ml{,i,y}>: package(fieldslib.syntax)
<frenetic/async/*.ml{,i,y}>: package(ipaddr)
<frenetic/async/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/async/*.ml{,i,y}>: package(sexplib)
<frenetic/async/*.ml{,i,y}>: package(sexplib.syntax)
<frenetic/async/*.ml{,i,y}>: package(str)
<frenetic/async/*.ml{,i,y}>: package(tcpip)
<frenetic/async/*.ml{,i,y}>: package(threads)
<frenetic/async/*.ml{,i,y}>: package(yojson)
<frenetic/async/*.ml{,i,y}>: use_frenetic
<frenetic/async/*.ml{,i,y}>: use_netkat
<frenetic/async/*.ml{,i,y}>: use_openflow
# Executable frenetic
"frenetic/frenetic/frenetic.native": package(async)
"frenetic/frenetic/frenetic.native": package(async_extended)
"frenetic/frenetic/frenetic.native": package(base64)
"frenetic/frenetic/frenetic.native": package(cmdliner)
"frenetic/frenetic/frenetic.native": package(cohttp)
"frenetic/frenetic/frenetic.native": package(cohttp.async)
"frenetic/frenetic/frenetic.native": package(core)
"frenetic/frenetic/frenetic.native": package(cstruct)
"frenetic/frenetic/frenetic.native": package(cstruct.async)
"frenetic/frenetic/frenetic.native": package(cstruct.syntax)
"frenetic/frenetic/frenetic.native": package(fieldslib)
"frenetic/frenetic/frenetic.native": package(fieldslib.syntax)
"frenetic/frenetic/frenetic.native": package(ipaddr)
"frenetic/frenetic/frenetic.native": package(ocamlgraph)
"frenetic/frenetic/frenetic.native": package(sexplib)
"frenetic/frenetic/frenetic.native": package(sexplib.syntax)
"frenetic/frenetic/frenetic.native": package(str)
"frenetic/frenetic/frenetic.native": package(tcpip)
"frenetic/frenetic/frenetic.native": package(threads)
"frenetic/frenetic/frenetic.native": package(yojson)
"frenetic/frenetic/frenetic.native": use_async
"frenetic/frenetic/frenetic.native": use_frenetic
"frenetic/frenetic/frenetic.native": use_netkat
"frenetic/frenetic/frenetic.native": use_openflow
<frenetic/frenetic/*.ml{,i,y}>: package(async)
<frenetic/frenetic/*.ml{,i,y}>: package(async_extended)
<frenetic/frenetic/*.ml{,i,y}>: package(base64)
<frenetic/frenetic/*.ml{,i,y}>: package(cmdliner)
<frenetic/frenetic/*.ml{,i,y}>: package(cohttp)
<frenetic/frenetic/*.ml{,i,y}>: package(cohttp.async)
<frenetic/frenetic/*.ml{,i,y}>: package(core)
<frenetic/frenetic/*.ml{,i,y}>: package(cstruct)
<frenetic/frenetic/*.ml{,i,y}>: package(cstruct.async)
<frenetic/frenetic/*.ml{,i,y}>: package(cstruct.syntax)
<frenetic/frenetic/*.ml{,i,y}>: package(fieldslib)
<frenetic/frenetic/*.ml{,i,y}>: package(fieldslib.syntax)
<frenetic/frenetic/*.ml{,i,y}>: package(ipaddr)
<frenetic/frenetic/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/frenetic/*.ml{,i,y}>: package(sexplib)
<frenetic/frenetic/*.ml{,i,y}>: package(sexplib.syntax)
<frenetic/frenetic/*.ml{,i,y}>: package(str)
<frenetic/frenetic/*.ml{,i,y}>: package(tcpip)
<frenetic/frenetic/*.ml{,i,y}>: package(threads)
<frenetic/frenetic/*.ml{,i,y}>: package(yojson)
<frenetic/frenetic/*.ml{,i,y}>: use_async
<frenetic/frenetic/*.ml{,i,y}>: use_frenetic
<frenetic/frenetic/*.ml{,i,y}>: use_netkat
<frenetic/frenetic/*.ml{,i,y}>: use_openflow
# OASIS_STOP
<packet/lib/*.ml>: syntax_camlp4o
<packet/test/*.ml>: syntax_camlp4o
<openflow/lib/*.ml{,i}>: syntax_camlp4o
<openflow/async/*.ml{,i}>: syntax_camlp4o
<openflow/test/*.ml{,i}>: syntax_camlp4o
<openflow/examples/*.ml{,i}>: syntax_camlp4o
<test/*.ml>: syntax_camlp4o
<lib/*.ml{,i}>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
<syntax/*.ml>: syntax_camlp4o
true: thread
